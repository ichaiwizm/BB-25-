import type { BusyBeaverSpec } from '../types/turing';

/**
 * Machine Busy Beaver Œ£(2) - 2 √©tats, 6 pas, 4 "1" (OFFICIELLE OPTIMALE)
 * La machine qui maximise Œ£(2), d√©couverte par Tibor Rad√≥ en 1962
 * Score maximal: 4 symboles 1 sur la bande finale en exactement 6 √©tapes
 */
export const sigma2BusyBeaver: BusyBeaverSpec = {
  numStates: 2,
  numSymbols: 2,
  name: 'Œ£(2) - 2 √©tats (6 pas, 4√ó"1")',
  description: 'Machine Busy Beaver OFFICIELLE optimale Œ£(2). Maximise le nombre de "1" pour 2 √©tats: 4 symboles en 6 √©tapes exactement.',
  predefinedRules: [
    // R√®gles officielles Œ£(2):
    // A0 ‚Üí 1 R B    B0 ‚Üí 1 L A
    // A1 ‚Üí 1 L B    B1 ‚Üí 1 R H
    {
      currentState: 'A',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'B'
    },
    {
      currentState: 'A',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'B'
    },
    {
      currentState: 'B',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'A'
    },
    {
      currentState: 'B',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'halt'
    }
  ]
};

/**
 * Machine Busy Beaver Œ£(3) - 3 √©tats, 14 pas, 6 "1" (OFFICIELLE OPTIMALE)
 * La machine qui maximise Œ£(3), d√©couverte par Lin et Rado en 1965
 * Score maximal: 6 symboles 1 sur la bande finale en exactement 14 √©tapes
 */
export const sigma3BusyBeaver: BusyBeaverSpec = {
  numStates: 3,
  numSymbols: 2,
  name: 'Œ£(3) - 3 √©tats (14 pas, 6√ó"1")',
  description: 'Machine Busy Beaver OFFICIELLE optimale Œ£(3). Maximise le nombre de "1" pour 3 √©tats: 6 symboles en 14 √©tapes exactement.',
  predefinedRules: [
    // R√®gles officielles Œ£(3):
    // A0 ‚Üí 1 R B    B0 ‚Üí 0 R C    C0 ‚Üí 1 L C
    // A1 ‚Üí 1 R H    B1 ‚Üí 1 R B    C1 ‚Üí 1 L A
    {
      currentState: 'A',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'B'
    },
    {
      currentState: 'A',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'halt'
    },
    {
      currentState: 'B',
      readSymbol: 0,
      writeSymbol: 0,
      direction: 'R',
      nextState: 'C'
    },
    {
      currentState: 'B',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'B'
    },
    {
      currentState: 'C',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'C'
    },
    {
      currentState: 'C',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'A'
    }
  ]
};

/**
 * Machine Busy Beaver Œ£(4) - 4 √©tats, 107 pas, 13 "1" (OFFICIELLE OPTIMALE)
 * La machine qui maximise Œ£(4), d√©couverte par Brady en 1975
 * Score maximal: 13 symboles 1 sur la bande finale en exactement 107 √©tapes
 */
export const sigma4BusyBeaver: BusyBeaverSpec = {
  numStates: 4,
  numSymbols: 2,
  name: 'Œ£(4) - 4 √©tats (107 pas, 13√ó"1")',
  description: 'Machine Busy Beaver OFFICIELLE optimale Œ£(4). Maximise le nombre de "1" pour 4 √©tats: 13 symboles en 107 √©tapes exactement.',
  predefinedRules: [
    // R√®gles officielles Œ£(4):
    // A0 ‚Üí 1 R B    B0 ‚Üí 1 L A    C0 ‚Üí 1 R H    D0 ‚Üí 1 R D
    // A1 ‚Üí 1 L B    B1 ‚Üí 0 L C    C1 ‚Üí 1 L D    D1 ‚Üí 0 R A
    {
      currentState: 'A',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'B'
    },
    {
      currentState: 'A',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'B'
    },
    {
      currentState: 'B',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'A'
    },
    {
      currentState: 'B',
      readSymbol: 1,
      writeSymbol: 0,
      direction: 'L',
      nextState: 'C'
    },
    {
      currentState: 'C',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'halt'
    },
    {
      currentState: 'C',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'D'
    },
    {
      currentState: 'D',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'D'
    },
    {
      currentState: 'D',
      readSymbol: 1,
      writeSymbol: 0,
      direction: 'R',
      nextState: 'A'
    }
  ]
};

/**
 * Machine Busy Beaver Œ£(5) - 5 √©tats, 47 176 870 pas, 4 098 "1" (OFFICIELLE PROUV√âE)
 * La machine qui maximise Œ£(5), prouv√©e le 2 juillet 2024
 * Score maximal: 4 098 symboles 1 sur la bande finale en exactement 47 176 870 √©tapes
 */
export const sigma5BusyBeaver: BusyBeaverSpec = {
  numStates: 5,
  numSymbols: 2,
  name: 'Œ£(5) - 5 √©tats (47M pas, 4098√ó"1")',
  description: 'Machine Busy Beaver OFFICIELLE optimale Œ£(5). Maximise le nombre de "1" pour 5 √©tats: 4 098 symboles en 47 176 870 √©tapes exactement. Prouv√©e le 2 juillet 2024.',
  predefinedRules: [
    // R√®gles officielles Œ£(5):
    // A: 0‚Üí1RB, 1‚Üí1LC
    // B: 0‚Üí1RC, 1‚Üí1RB  
    // C: 0‚Üí1RD, 1‚Üí0LE
    // D: 0‚Üí1LA, 1‚Üí1LD
    // E: 0‚Üí1RH, 1‚Üí0LA
    {
      currentState: 'A',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'B'
    },
    {
      currentState: 'A',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'C'
    },
    {
      currentState: 'B',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'C'
    },
    {
      currentState: 'B',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'B'
    },
    {
      currentState: 'C',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'D'
    },
    {
      currentState: 'C',
      readSymbol: 1,
      writeSymbol: 0,
      direction: 'L',
      nextState: 'E'
    },
    {
      currentState: 'D',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'A'
    },
    {
      currentState: 'D',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'D'
    },
    {
      currentState: 'E',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'halt'
    },
    {
      currentState: 'E',
      readSymbol: 1,
      writeSymbol: 0,
      direction: 'L',
      nextState: 'A'
    }
  ]
};

/**
 * üö® MACHINE EXP√âRIMENTALE Œ£(6) - 6 √©tats (> 10‚Üë‚Üë11,010,000 pas) üö®
 * ATTENTION: Cette machine N'EST PAS la vraie solution Œ£(6) ! Elle est NON-PROUV√âE !
 * 
 * Il s'agit du MEILLEUR CANDIDAT ACTUEL (juillet 2025) pour Œ£(6), qui:
 * - D√©passe d√©j√† 10‚Üë‚Üë11,010,000 pas (tour de 11+ millions de dizaines)
 * - Aucune borne sup√©rieure connue - pourrait √™tre infinie
 * - Temps d'ex√©cution estim√©: PLUS QUE L'√ÇGE DE L'UNIVERS √ó 10^googolplex
 * 
 * ‚ö†Ô∏è ESTIMATIONS TEMPORELLES APOCALYPTIQUES:
 * Ordinateur normal (10^9 ops/sec): > 10^(10^15) si√®cles 
 * Tous les supercalculateurs de la plan√®te: > 10^(10^14) si√®cles
 * 
 * La recherche BB(6) est un des d√©fis non-r√©solus les plus difficiles en informatique.
 * Cette machine pourrait ne JAMAIS s'arr√™ter - nous ne le savons pas !
 */
export const sigma6Candidate: BusyBeaverSpec = {
  numStates: 6,
  numSymbols: 2,
  name: 'Œ£(6) - Candidat non-prouv√©',
  description: 'üö® NON-PROUV√â ! Meilleur candidat actuel pour Œ£(6). D√©passe 10‚Üë‚Üë11M pas. Pourrait ne jamais s\'arr√™ter ! Temps d\'ex√©cution: plus que l\'√¢ge de l\'Univers √ó googolplex.',
  predefinedRules: [
    // Table de transition du meilleur candidat BB(6) - juillet 2025
    // Source: Wikip√©dia + Shtetl-Optimized + theHigherGeometer
    //           œÉ=0                   œÉ=1
    // A : 1 R B                   0 L D
    // B : 1 R C                   0 R F  
    // C : 1 L C                   1 L A
    // D : 0 L E                   1 R H  (H = halt)
    // E : 1 L F                   0 R B
    // F : 0 R C                   0 R E
    
    // √âtat A
    {
      currentState: 'A',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'B'
    },
    {
      currentState: 'A',
      readSymbol: 1,
      writeSymbol: 0,
      direction: 'L',
      nextState: 'D'
    },
    
    // √âtat B
    {
      currentState: 'B',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'C'
    },
    {
      currentState: 'B',
      readSymbol: 1,
      writeSymbol: 0,
      direction: 'R',
      nextState: 'F'
    },
    
    // √âtat C - "laboureur" qui √©crit des 1 vers la gauche
    {
      currentState: 'C',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'C'
    },
    {
      currentState: 'C',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'A'
    },
    
    // √âtat D - pr√©paration de l'explosion finale
    {
      currentState: 'D',
      readSymbol: 0,
      writeSymbol: 0,
      direction: 'L',
      nextState: 'E'
    },
    {
      currentState: 'D',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'halt' // ‚Üê ARR√äT FINAL (apr√®s une √©ternit√©)
    },
    
    // √âtat E
    {
      currentState: 'E',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'L',
      nextState: 'F'
    },
    {
      currentState: 'E',
      readSymbol: 1,
      writeSymbol: 0,
      direction: 'R',
      nextState: 'B'
    },
    
    // √âtat F
    {
      currentState: 'F',
      readSymbol: 0,
      writeSymbol: 0,
      direction: 'R',
      nextState: 'C'
    },
    {
      currentState: 'F',
      readSymbol: 1,
      writeSymbol: 0,
      direction: 'R',
      nextState: 'E'
    }
  ]
};

/**
 * Machine de test simple (pour debug)
 * Score maximal: 2 symboles 1
 */
export const simpleTestMachine: BusyBeaverSpec = {
  numStates: 2,
  numSymbols: 2,
  name: 'Machine de test simple',
  description: 'Machine simple pour tester le simulateur. Score maximal: 2 symboles 1.',
  predefinedRules: [
    // √âtat A (√©tat initial)
    {
      currentState: 'A',
      readSymbol: 0,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'halt' // Arr√™t imm√©diat
    },
    {
      currentState: 'A',
      readSymbol: 1,
      writeSymbol: 1,
      direction: 'R',
      nextState: 'halt'
    }
  ]
};


/**
 * Map des machines parfaites officielles
 */
export const perfectMachinesMap: Record<string, BusyBeaverSpec> = {
  'Œ£(2) - 6 pas, 4√ó"1"': sigma2BusyBeaver,
  'Œ£(3) - 14 pas, 6√ó"1"': sigma3BusyBeaver,
  'Œ£(4) - 107 pas, 13√ó"1"': sigma4BusyBeaver,
  'Œ£(5) - 47M pas, 4098√ó"1"': sigma5BusyBeaver,
  'Œ£(6) - Candidat non-prouv√©': sigma6Candidate,
};

/**
 * Map des presets disponibles pour le menu d√©roulant (backward compatibility)
 */
export const presetsMap: Record<string, BusyBeaverSpec> = {
  'Œ£(2) Officielle': sigma2BusyBeaver,
  'Œ£(3) Officielle': sigma3BusyBeaver,
  'Œ£(4) Officielle': sigma4BusyBeaver,
  'Œ£(5) Officielle': sigma5BusyBeaver,
  'Test Simple': simpleTestMachine
};

// Machines anciennes (pour compatibilit√©)
export const twoStateBusyBeaver = sigma2BusyBeaver;
export const threeStateBusyBeaver = sigma3BusyBeaver; 
export const fourStateBusyBeaver = sigma4BusyBeaver;

/**
 * Liste ordonn√©e des presets pour l'affichage
 */
export const presetsList: BusyBeaverSpec[] = [
  simpleTestMachine,
  sigma2BusyBeaver,
  sigma3BusyBeaver,
  sigma4BusyBeaver,
  sigma5BusyBeaver
];

/**
 * Informations sur les scores maximaux connus
 */
export const knownScores: Record<number, { score: number | string; year: number; discoverer: string }> = {
  1: { score: 1, year: 1962, discoverer: 'Tibor Rad√≥' },
  2: { score: 4, year: 1962, discoverer: 'Tibor Rad√≥' },
  3: { score: 6, year: 1965, discoverer: 'Lin & Rado' },
  4: { score: 13, year: 1975, discoverer: 'Brady' },
  5: { score: 4098, year: 1989, discoverer: 'Marxen & Buntrock' },
  6: { score: '‚âà4.6e1439', year: 1997, discoverer: 'Marxen & Buntrock' } // trop grand pour Number, stock√© en string
};

/**
 * Obtient le score maximal connu pour un nombre d'√©tats donn√©
 * @param nStates Nombre d'√©tats
 * @returns Score maximal ou null si inconnu
 */
export function getKnownScore(nStates: number): number | string | null {
  return knownScores[nStates]?.score ?? null;
}

/**
 * Obtient les informations compl√®tes pour un nombre d'√©tats donn√©
 * @param nStates Nombre d'√©tats
 * @returns Informations ou null si inconnu
 */
export function getKnownScoreInfo(nStates: number): { score: number | string; year: number; discoverer: string } | null {
  return knownScores[nStates] ?? null;
} 